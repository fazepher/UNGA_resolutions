[["data.html", "2 Data 2.1 General Assembly Session Compilation 2.2 Voting Data", " 2 Data 2.1 General Assembly Session Compilation According to the Dag Hammarskjöld Library website (Kurtas, n.d.a): For each session of the General Assembly, resolutions and decisions are compiled and issued as a supplement to the General Assembly Official Records (GAOR) […] For regular sessions, starting with the 42nd session, the document has been assigned number 49, and is Supplement 49 to the GAOR. Currently, there are usually 3 volumes As we are interested in resolutions, we would need volumes I and III which contain, respectively, those adopted by the GA in the September-December and January-September periods of each regular session. These documents are identified by their symbols A/[Sess.N.]/49Vol(I.) or A/[Sess.N.]/49Vol(III.), where [Sess.N.] is a placeholder for the session number. For example, the resolutions for the 74th session, adopted between September and December 2019 would be compiled in the document A/74/49Vol(I.) and found at https://undocs.org/en/A/74/49(Vol.I). 2.1.1 Download and Import Starting from the 67th session of the UNGA, there is a common machine readable format for these pdf. This allows us to download them (in a folder named resol_pdf) and import them separately into R each as a character vector with one element per document page. vol_1_all &lt;- list.files(here(&quot;resol_pdf&quot;)) %&gt;% keep(~str_detect(.x,&quot;Vol.I\\\\)&quot;)) %&gt;% rev() %&gt;% map(~pdf_text(here(&quot;resol_pdf&quot;,.x))) vol_3_all &lt;- list.files(here(&quot;resol_pdf&quot;)) %&gt;% keep(~str_detect(.x,&quot;Vol.III\\\\)&quot;)) %&gt;% rev() %&gt;% map(~pdf_text(here(&quot;resol_pdf&quot;,.x))) We need two different lists, one for each type of volume since the respective document structures are slightly different. For Volume I documents: The first 4 pdf pages typically contain the cover, a note on resolutions and decisions, the main table of contents, and a blank page. Numbered pages thus start at pdf page 5. An exception is document A/70/49(Vol.I) where there is no such blank page and numbered pages start at pdf page 4. The document then is split in its 7 main sections, each containing their own (sub) table of contents. Each section contains resolutions that refer to either none (first section) or one of the 6 main committees of the General Assambly (Nations 2021): First Committee (Disarmament &amp; International Security) Second Committee (Economic &amp; Financial) Third Committee (Social, Humanitarian &amp; Cultural) Fourth Committee (Special Political &amp; Decolonization) Fifth Committee (Administrative &amp; Budgetary) Sixth Committee (Legal) The document finishes with 2 annexes. For Volume III documents: The first 4 pdf pages follow the same pattern as Vol. I. documents. The document then is split in its 4 main sections. We are only interested in the first 3 as they contain resolutions: Without reference to a Main Committee In relation to the Fourth Committee (Special Political &amp; Decolonization) In relation to the Fifth Committee (Administrative &amp; Budgetary) The 4th main section contains decissions of the General Assembly. The document finishes with 2 annexes. 2.1.2 Data cleaning We shall start parsing the pdfs by extracting their main table of contents via the following function: extract_toc &lt;- function(x, vol = 1){ # We extract page 3 of the document x raw_toc &lt;- x[[3]] %&gt;% str_split(&quot;\\n&quot;) %&gt;% unlist() %&gt;% str_trim() # The section for the 4th Committee is expected to be divided between lines # We then extract the table for the main sections # We assume the first two lines are &quot;Content&quot; and &quot;Section/Page&quot; # This is different depending on the volume if(vol == 1){ # In volume 1 # The 4th Committee section is divided between lines 5 and 6 of the raw toc raw_toc[5] &lt;- paste(raw_toc[5:6],collapse = &quot; &quot;) raw_toc &lt;- raw_toc[-6] # we have 7 main sections assuming (corrected) lines 3 to 9 # we also identify the page where annexes start, assuming it&#39;s line 11 clean_toc &lt;- raw_toc[3:9] %&gt;% str_split_fixed(pattern = &quot;(\\\\.{2,})&quot;, n = 2) %&gt;% as.data.frame() %&gt;% tibble() %&gt;% transmute(Section = str_trim(V1), Start_Page = str_trim(V2) %&gt;% as.integer, Annex_Page = str_extract(raw_toc[11],&quot;\\\\d+$&quot;) %&gt;% as.integer) } else { # In volume 3 # The 4th Committee section is divided between lines 4 and 5 of the raw toc raw_toc[4] &lt;- paste(raw_toc[4:5],collapse = &quot; &quot;) raw_toc &lt;- raw_toc[-5] # we have 3 main sections assuming (corrected) lines 3 to 5 # we also identify the page where decisions start, assuming it&#39;s line 6 clean_toc &lt;- raw_toc[3:5] %&gt;% str_split_fixed(pattern = &quot;(\\\\.{2,})&quot;, n = 2) %&gt;% as.data.frame() %&gt;% tibble() %&gt;% transmute(Section = str_trim(V1), Start_Page = str_trim(V2) %&gt;% as.integer, Annex_Page = str_extract(raw_toc[6],&quot;\\\\d+$&quot;) %&gt;% as.integer) } return(clean_toc) } We then do a soft check on this table to ensure that the start pages effectively refer to the correct pages in the document. In short, we verify that each given start page has as an approximate header the corresponding section and that the preceding page doesn’t. We want to identify if there is some section that doesn’t satisfy these conditions. We define the following function to help us do that: soft_check_toc &lt;- function(toc, shift = 4, all_pages = vol_1_all, n_check = 20){ toc %&gt;% mutate(Soft_Check_Start = map_chr(Start_Page, ~ all_pages[.x + shift] %&gt;% str_trim() %&gt;% str_sub(end = n_check)) %&gt;% equals(str_sub(Section, end = n_check)), Soft_Check_Prev = map_chr(Start_Page, ~ all_pages[.x + shift - 1] %&gt;% str_trim() %&gt;% str_sub(end = n_check)) %&gt;% equals(str_sub(Section, end = n_check)), Soft_Check = Soft_Check_Start &amp; !Soft_Check_Prev, i = row_number()) %&gt;% filter(!Soft_Check) } We detect that there is indeed an error on one of the Vol. I documents, that of session 75. The problem upon visual inspection is a typo in the pdf and Section II should start on page 223 not 203. We manually correct it and see that there are no further mistakes risen at this soft checkpoint. # Volume I vol_1_toc_check &lt;- seq_along(vol_1_all) %&gt;% map(~extract_toc(vol_1_all[[.x]], vol = 1) %&gt;% mutate(Session = 76 - .x, Year = 2021 - .x)) seq_along(vol_1_toc_check) %&gt;% map(~soft_check_toc(toc = vol_1_toc_check[[.x]], all_pages = vol_1_all[[.x]])) vol_1_toc_check[[1]]$Start_Page[2] &lt;- 223 soft_check_toc(toc = vol_1_toc_check[[6]], shift = 3, all_pages = vol_1_all[[6]]) seq_along(vol_1_toc_check) %&gt;% map(~soft_check_toc(toc = vol_1_toc_check[[.x]], shift = if_else(.x == 6, 3, 4), all_pages = vol_1_all[[.x]])) There are no problems identified for Vol. III documents. # Volume 3 vol_3_toc_check &lt;- seq_along(vol_3_all) %&gt;% map(~extract_toc(vol_3_all[[.x]], vol = 3) %&gt;% mutate(Session = 75 - .x, Year = 2020 - .x)) seq_along(vol_3_toc_check) %&gt;% map(~soft_check_toc(toc = vol_3_toc_check[[.x]], all_pages = vol_3_all[[.x]])) Once we are confident that we have identified correctly the starting pages of each section, we can also assign ending pages for each section and have our main table of contents object. Now, as said previously, each section contains a table of contents and the resolutions. In order to correctly parse resolution texts we will need to remove the headers and footers of the pages. These are usually the name of the section and the page number. We will thus be able to remove them programatically; there are, however, two exceptions that must be dealt with first. These are explained for Vol. I documents, but they are similar for Vol. III: The title of Section III is long enough that it’s split in two lines on its own table of contents. We must make this a single line so that our removal function works correctly. The table of contents of Section VI contains a footnote that needs to be removed. It is signaled with a star * at the end of the title and that reads Unless otherwise stated, the draft resolutions recommended in the reports were submitted by the Chair or another officer of the Bureau of the Committee. The star symbol may be registered differently depending on the specific pdf so we use regular expressions to find the correct patterns to remove. # Volume I vol_1_toc &lt;- vol_1_toc_check %&gt;% map(~.x %&gt;% mutate(End_Page = lead(Start_Page, default = unique(Annex_Page))-1) %&gt;% select(Section, Session, Year, Start_Page, End_Page)) vol_1_raw &lt;- map(vol_1_all,str_trim) # The shift is different for session 69 since there is no blank page 4 for(s in seq_along(vol_1_raw)){ print(s) aux_i &lt;- vol_1_toc[[s]]$Start_Page[3] + if_else(s == 6, 3, shift) str_detect(string = vol_1_raw[[s]][aux_i], pattern = &quot;(?&lt;=Special Political)\\n\\\\s*(?= and Decol)&quot;) %&gt;% print vol_1_raw[[s]][aux_i] &lt;- str_remove(string = vol_1_raw[[s]][aux_i], pattern = &quot;(?&lt;=Special Political)\\n\\\\s*(?= and Decol)&quot;) aux_i &lt;- vol_1_toc[[s]]$Start_Page[6] + if_else(s == 6, 3, shift) str_detect(string = vol_1_raw[[s]][aux_i], pattern = &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*(?=\\n\\\\s+\\\\d+$)&quot;) %&gt;% print str_detect(string = vol_1_raw[[s]][aux_i], pattern = &quot;(?&lt;=Committee)(\\\\*||∗)&quot;) %&gt;% print str_detect(string = vol_1_raw[[s]][aux_i], pattern = &quot;(((?&lt;=Page\\n)(\\\\*||∗)\\n)|((?&lt;=number\\n)(\\\\*||∗)\\n))&quot;) %&gt;% print vol_1_raw[[s]][aux_i] &lt;- str_remove(string = vol_1_raw[[s]][aux_i], pattern = &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*(?=\\n\\\\s+\\\\d+$)&quot;) %&gt;% str_remove(pattern = &quot;(?&lt;=Committee)(\\\\*||∗)&quot;) %&gt;% #There may be a hidden * or  at the top of the toc str_remove(pattern = &quot;(((?&lt;=Page\\n)(\\\\*||∗)\\n)|((?&lt;=number\\n)(\\\\*||∗)\\n))&quot;) } # Volume III vol_3_toc &lt;- vol_3_toc_check %&gt;% map(~.x %&gt;% mutate(End_Page = lead(Start_Page, default = unique(Annex_Page))-1) %&gt;% select(Section, Session, Year, Start_Page, End_Page)) vol_3_raw &lt;- map(vol_3_all,str_trim) for(s in seq_along(vol_3_raw)){ print(s) aux_i &lt;- vol_3_toc[[s]]$Start_Page[2] + shift str_detect(string = vol_3_raw[[s]][aux_i], pattern = paste0(&quot;(&quot;, &quot;((?&lt;=Special Political)\\n\\\\s*(?= and Decol))&quot;, &quot;|&quot;, &quot;((?&lt;=and Decolonization)\\n\\\\s*(?= Committee ))&quot;, &quot;)&quot;)) %&gt;% print vol_3_raw[[s]][aux_i] &lt;- str_remove(string = vol_3_raw[[s]][aux_i], pattern = paste0(&quot;(&quot;, &quot;((?&lt;=Special Political)\\n\\\\s*(?= and Decol))&quot;, &quot;|&quot;, &quot;((?&lt;=and Decolonization)\\n\\\\s*(?= Committee ))&quot;, &quot;)&quot;)) aux_i &lt;- vol_3_toc[[s]]$Start_Page[3] + shift str_detect(string = vol_3_raw[[s]][aux_i], pattern = paste0(&quot;(&quot;, &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*(?=\\n\\\\s+\\\\d+$)&quot;, &quot;|&quot;, &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*\\nCommittee\\\\.(?=\\n\\\\s+\\\\d+$)&quot;, &quot;)&quot;)) %&gt;% print str_detect(string = vol_3_raw[[s]][aux_i], pattern = &quot;(?&lt;=Committee)(\\\\*||∗)&quot;) %&gt;% print str_detect(string = vol_3_raw[[s]][aux_i], pattern = &quot;(((?&lt;=Page\\n)(\\\\*||∗)\\n)|((?&lt;=number\\n)(\\\\*||∗)\\n))&quot;) %&gt;% print vol_3_raw[[s]][aux_i] &lt;- str_remove(string = vol_3_raw[[s]][aux_i], pattern = paste0(&quot;(&quot;, &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*(?=\\n\\\\s+\\\\d+$)&quot;, &quot;|&quot;, &quot;_+\\n(\\\\*||∗)\\n*[[:print:]]*\\nCommittee\\\\.(?=\\n\\\\s+\\\\d+$)&quot;, &quot;)&quot;)) %&gt;% str_remove(pattern = &quot;(?&lt;=Committee)(\\\\*||∗)&quot;) %&gt;% #There may be a hidden * or  at the top of the toc str_remove(pattern = &quot;(((?&lt;=Page\\n)(\\\\*||∗)\\n)|((?&lt;=number\\n)(\\\\*||∗)\\n))&quot;) } Once we have cleaned this exceptions we would programmatically remove headers and footers via the following function: remove_header_footer &lt;- function(raw_page, header){ # Ensure we have a trimmed page raw_page &lt;- str_trim(raw_page) # Verify headers, if they don&#39;t match, return NA end_header &lt;- nchar(header) check_header &lt;- str_sub(string = raw_page, end = end_header) == header end_header &lt;- if_else(check_header, end_header, NA_integer_) # The footer is usually the document page on its own line, # The function returns NA if it doesn&#39;t locate this pattern. start_footer &lt;- str_locate(raw_page,&quot;\\n\\\\s*\\\\d+$&quot;)[,&quot;start&quot;] new_page &lt;- str_sub(raw_page,start = end_header + 1, end = start_footer - 1) %&gt;% unlist() %&gt;% str_trim() return(new_page) } We can construct a master_tibble object that integrates, for each section and still in raw format, its own table of contents as well as all the resolutions. vol_1_master_tibble &lt;- seq_along(vol_1_toc) %&gt;% map(function(s) vol_1_toc[[s]] %&gt;% mutate(Raw_Pages = pmap(list(Start_Page, End_Page, Section), ~ vol_1_raw[[s]][..1:..2 + if_else(s == 6, 3, shift)] %&gt;% discard(~.x == &quot;&quot;) %&gt;% remove_header_footer(paste0(..3,&quot;\\n&quot;))), First_Resol = map2_int(Raw_Pages,Session, ~str_detect(.x,paste(&quot;^RESOLUTION&quot;,.y)) %&gt;% which %&gt;% min), Section_toc = map2_chr(Raw_Pages,First_Resol, ~.x[1:(.y-1)] %&gt;% paste(collapse = &quot;\\n&quot;)), Section_res = map2_chr(Raw_Pages,First_Resol, ~.x[.y:length(.x)] %&gt;% paste(collapse = &quot;\\n&quot;))) %&gt;% select(-Raw_Pages,-First_Resol)) vol_3_master_tibble &lt;- seq_along(vol_3_toc) %&gt;% map(function(s) vol_3_toc[[s]] %&gt;% mutate(Raw_Pages = pmap(list(Start_Page, End_Page, Section), ~ vol_3_raw[[s]][..1:..2 + shift] %&gt;% discard(~.x == &quot;&quot;) %&gt;% remove_header_footer(paste0(..3,&quot;\\n&quot;))), First_Resol = map2_int(Raw_Pages,Session, ~str_detect(.x,paste(&quot;^RESOLUTION&quot;,.y)) %&gt;% which %&gt;% min), Section_toc = map2_chr(Raw_Pages,First_Resol, ~.x[1:(.y-1)] %&gt;% paste(collapse = &quot;\\n&quot;)), Section_res = map2_chr(Raw_Pages,First_Resol, ~.x[.y:length(.x)] %&gt;% paste(collapse = &quot;\\n&quot;))) %&gt;% select(-Raw_Pages,-First_Resol)) 2.1.2.1 Resolution Texts Once we separated the table of contents from the resolution texts we can parse them. A key observation is that each resolution is signaled by an upper letter heading such as RESOLUTION 75/1, RESOLUTIONS 75/101 A and B or RESOLUTIONS 75/254 A-C depending on whether it’s a standalone resolution or it has two or more subresolutions. Then, each resolution contains metadata on it’s adoption such as session, date, voting data, or sponsorship. The actual resolutions start by it’s resolution number and a period on its own line (e.g. 75/1.). We use these patterns to separate all resolutions and identify the text as well as the metadata. vol_1_resol_text_df &lt;- vol_1_master_tibble %&gt;% map_dfr(~ .x$Section_res %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% str_split(pattern = &quot;(?=RESOLUTION)&quot;) %&gt;% unlist %&gt;% tibble(Resolution_Text = .) %&gt;% slice(-1) %&gt;% separate(col = Resolution_Text, into = c(&quot;Resolution_Header&quot;,&quot;Aux&quot;), sep=&quot;\\n&quot;, extra = &quot;merge&quot;) %&gt;% mutate(UNRES = str_extract(Resolution_Header,&quot;\\\\d+/\\\\d+&quot;), Aux = str_trim(Aux), Aux_Pos = map2(Aux,UNRES,~str_locate(.x, pattern = paste0(.y,&quot;\\\\.\\\\s+&quot;))), Start_Pos = map_int(Aux_Pos,~.x[1,&quot;start&quot;]), End_Pos = map_int(Aux_Pos,~.x[1,&quot;end&quot;]), Resol_Meta = map2_chr(Aux,Start_Pos,~str_sub(.x,end = .y - 1)), Resol_Text = map2_chr(Aux,End_Pos, ~ str_sub(.x,start = .y + 1)), Resol_Text_WPOP = Resol_Text %&gt;% str_remove_all(&quot;(?&lt;=\\n)\\\\s+[A-Z][a-z]*ing&quot;) %&gt;% str_remove_all(&quot;(?&lt;=\\n)\\\\s+\\\\d+\\\\.\\\\s+[A-Z][a-z]*&quot;)) %&gt;% select(UNRES,Resol_Meta,Resol_Text,Resol_Text_WPOP)) # Double check hidden characters and RES/73/293 vol_3_resol_text_df &lt;- vol_3_master_tibble %&gt;% map_dfr(~ .x$Section_res %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% str_split(pattern = &quot;(?=RESOLUTION)&quot;) %&gt;% unlist %&gt;% tibble(Resolution_Text = .) %&gt;% slice(-1) %&gt;% separate(col = Resolution_Text, into = c(&quot;Resolution_Header&quot;,&quot;Aux&quot;), sep=&quot;\\n&quot;, extra = &quot;merge&quot;) %&gt;% mutate(UNRES = str_extract(Resolution_Header,&quot;\\\\d+/\\\\d+&quot;), Aux = str_trim(Aux), Aux_Pos = map2(Aux,UNRES,~str_locate(.x, pattern = paste0(.y,&quot;\\\\.\\\\s+&quot;))), Start_Pos = map_int(Aux_Pos,~.x[1,&quot;start&quot;]), End_Pos = map_int(Aux_Pos,~.x[1,&quot;end&quot;]), Resol_Meta = map2_chr(Aux,Start_Pos,~str_sub(.x,end = .y - 1)), Resol_Text = map2_chr(Aux,End_Pos, ~ str_sub(.x,start = .y + 1)), Resol_Text_WPOP = Resol_Text %&gt;% str_remove_all(&quot;(?&lt;=\\n)\\\\s+[A-Z][a-z]*ing&quot;) %&gt;% str_remove_all(&quot;(?&lt;=\\n)\\\\s+\\\\d+\\\\.\\\\s+[A-Z][a-z]*&quot;)) %&gt;% select(UNRES,Resol_Meta,Resol_Text,Resol_Text_WPOP)) There is, however, a last cleaning in the column Resol_Text_WPOP. This name referes to resolution texts without preambulatory and operative phrases. These are common phrases that are always present in UNGA resolutions since they indicate the structure explained here (Kurtas, n.d.b). As the next step in the analysis will be text mining, we could consider all these phrases as noise within the UNGA context so it is useful to have two versions of the resolutions, one without them and one original that keeps them. We have now completed the main process of data cleaning, we can join all the resolutions and save the data. resol_text_df &lt;- bind_rows(mutate(vol_1_resol_text_df, Vol = &quot;1&quot;), mutate(vol_3_resol_text_df, Vol = &quot;3&quot;)) %&gt;% mutate(ID_FAZH = paste(Vol,UNRES,sep=&quot;/&quot;)) save(resol_text_df, file = here(&quot;resol_data&quot;,&quot;resol_text_df.RData&quot;)) 2.2 Voting Data While we could parse voting data from the metadata of resolutions in the compilation pdfs. We can recover an already processed data set on voting records for the UNGA (Voeten, Strezhnev, and Bailey 2021): Accesed and downloaded on June 15, 2021 available at https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LEJUQZ Erik Voeten, “Data and Analyses of Voting in the UN General Assembly” Routledge Handbook of International Organization, edited by Bob Reinalda (published May 27, 2013) Bailey, Michael A., Anton Strezhnev, and Erik Voeten. 2017. Estimating dynamic state preferences from united nations voting data. Journal of Conflict Resolution 61 (2): 430-56. FALTA EXPLICAR DATOS DE VOTOS "]]
